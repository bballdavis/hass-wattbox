name: Check PyWattBox Library Version

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
  pull_request:
    paths:
      - 'custom_components/wattbox/pywattbox/**'
  push:
    branches:
      - beta
    paths:
      - 'custom_components/wattbox/pywattbox/**'

jobs:
  check-library-version:
    runs-on: ubuntu-latest
    name: Check PyWattBox Library Version

    steps:
      - name: Checkout current repository (beta branch)
        uses: actions/checkout@v4
        with:
          ref: beta
          path: hass-wattbox
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout PyWattBox library repository (v0.9.0 tag)
        uses: actions/checkout@v4
        with:
          repository: eseglem/pywattbox
          ref: v0.9.0
          path: pywattbox

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Compare library versions
        id: compare
        run: |
          echo "Comparing library versions..."

          get_version() {
            local file="$1"
            if [ -f "$file" ]; then
              grep -E '^__version__\s*=' "$file" | sed 's/.*=\s*["\x27]\([^"\x27]*\)["\x27].*/\1/' || echo "unknown"
            else
              echo "missing"
            fi
          }

          CURRENT_VERSION=$(get_version "hass-wattbox/custom_components/wattbox/pywattbox/__init__.py")
          LATEST_VERSION=$(get_version "pywattbox/pywattbox/__init__.py")

          echo "Current version in hass-wattbox: $CURRENT_VERSION"
          echo "Latest version in pywattbox: $LATEST_VERSION"

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "versions_match=false" >> $GITHUB_OUTPUT
            echo "❌ Version mismatch detected!"
            echo "  Current: $CURRENT_VERSION"
            echo "  Latest:  $LATEST_VERSION"
          else
            echo "versions_match=true" >> $GITHUB_OUTPUT
            echo "✅ Versions match!"
          fi

      - name: Compare file contents
        id: compare-files
        run: |
          echo "Comparing file contents..."

          if [ -d "pywattbox/pywattbox" ]; then
            FILES=($(find pywattbox/pywattbox -name "*.py" -type f -printf "%f\n" | sort))
          else
            echo "❌ Source directory pywattbox/pywattbox not found"
            exit 1
          fi

          CHANGES_DETECTED=false
          CHANGED_FILES=""

          for file in "${FILES[@]}"; do
            CURRENT_FILE="hass-wattbox/custom_components/wattbox/pywattbox/$file"
            LATEST_FILE="pywattbox/pywattbox/$file"

            echo "Checking $file..."

            if [ ! -f "$CURRENT_FILE" ]; then
              echo "❌ $file is missing in current repository"
              CHANGES_DETECTED=true
              CHANGED_FILES="$CHANGED_FILES\n- $file (missing)"
              continue
            fi

            if [ ! -f "$LATEST_FILE" ]; then
              echo "⚠️ $file is missing in latest repository"
              continue
            fi

            if ! diff -w "$CURRENT_FILE" "$LATEST_FILE" > /dev/null 2>&1; then
              echo "❌ $file has differences"
              CHANGES_DETECTED=true
              CHANGED_FILES="$CHANGED_FILES\n- $file (content differs)"
              echo "Differences in $file:"
              diff -u "$CURRENT_FILE" "$LATEST_FILE" | head -20
              echo "..."
            else
              echo "✅ $file matches"
            fi
          done

          echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Copy updated files and commit
        if: steps.compare.outputs.versions_match == 'false' || steps.compare-files.outputs.changes_detected == 'true'
        run: |
          cd hass-wattbox

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "📁 Copying PyWattBox library files..."

          # Always create the target directory
          mkdir -p custom_components/wattbox/pywattbox

          # Copy all files (overwrite or create as needed)
          cp -r ../pywattbox/pywattbox/* custom_components/wattbox/pywattbox/

          # Always add files to git index after copying
          git add custom_components/wattbox/pywattbox/

          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "ℹ️ No changes detected after copying files"
          else
            echo "📝 Changes detected, creating commit..."

            CURRENT_VERSION="${{ steps.compare.outputs.current_version }}"
            LATEST_VERSION="${{ steps.compare.outputs.latest_version }}"

            if [ "${{ steps.compare.outputs.versions_match }}" == "false" ]; then
              COMMIT_MSG="Update PyWattBox library from v${CURRENT_VERSION} to v${LATEST_VERSION}"
            else
              COMMIT_MSG="Update PyWattBox library files (v${LATEST_VERSION})"
            fi

            git commit -m "$COMMIT_MSG" -m "Auto-updated from eseglem/pywattbox repository

Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

            git push origin beta

            echo "✅ Changes committed and pushed to beta branch"
            echo "commit_created=true" >> $GITHUB_OUTPUT
          fi

      - name: Create summary comment
        if: steps.compare.outputs.versions_match == 'false' || steps.compare-files.outputs.changes_detected == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const currentVersion = '${{ steps.compare.outputs.current_version }}';
            const latestVersion = '${{ steps.compare.outputs.latest_version }}';
            const changedFiles = `${{ steps.compare-files.outputs.changed_files }}`;
            const versionsMatch = '${{ steps.compare.outputs.versions_match }}' === 'true';
            const changesDetected = '${{ steps.compare-files.outputs.changes_detected }}' === 'true';

            if (context.eventName === 'schedule' || context.eventName === 'workflow_dispatch') {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: ['pywattbox-update']
              });

              const existingIssue = issues.data.find(issue =>
                issue.title.includes('PyWattBox Library Auto-Update')
              );

              let body = `## 🔄 PyWattBox Library Auto-Update Completed\n\n`;

              if (!versionsMatch) {
                body += `### Version Updated\n`;
                body += `- **Previous version**: \`${currentVersion}\`\n`;
                body += `- **Updated to version**: \`${latestVersion}\`\n\n`;
              }

              if (changesDetected) {
                body += `### Files Updated\n`;
                body += `The following files were updated:\n${changedFiles}\n\n`;
              }

              body += `### ✅ Automatic Update Completed\n`;
              body += `The PyWattBox library has been automatically updated on the **beta branch**.\n\n`;
              body += `### Next Steps\n`;
              body += `1. Review the changes in the beta branch\n`;
              body += `2. Test the integration to ensure compatibility\n`;
              body += `3. Merge to main branch when ready\n\n`;
              body += `### Commit Details\n`;
              body += `- **Branch**: beta\n`;
              body += `- **Workflow Run**: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
              body += `---\n`;
              body += `*This update was automatically performed by the PyWattBox library update workflow.*`;

              if (existingIssue) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  title: `PyWattBox Library Auto-Update Completed (v${latestVersion})`,
                  body: body,
                  state: 'closed'
                });

                console.log(`Updated and closed existing issue #${existingIssue.number}`);
              } else {
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `PyWattBox Library Auto-Update Completed (v${latestVersion})`,
                  body: body,
                  labels: ['pywattbox-update', 'automated'],
                  state: 'closed'
                });

                console.log(`Created new issue #${issue.data.number}`);
              }
            }

      - name: Summary
        run: |
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Current Version | \`${{ steps.compare.outputs.current_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Latest Version | \`${{ steps.compare.outputs.latest_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Versions Match | ${{ steps.compare.outputs.versions_match == 'true' && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Files Match | ${{ steps.compare-files.outputs.changes_detected == 'false' && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.compare.outputs.versions_match }}" == "false" ] || [ "${{ steps.compare-files.outputs.changes_detected }}" == "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ Auto-Update Completed" >> $GITHUB_STEP_SUMMARY
            echo "The PyWattBox library has been automatically updated on the beta branch. Please review and test the changes." >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ All Good" >> $GITHUB_STEP_SUMMARY
            echo "PyWattBox library is up to date on the beta
